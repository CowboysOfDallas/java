# Definition for a binary tree node.
import collections
import heapq
import unittest

# Read about enumerate in python
from typing import List

class MinimizeMalwareSpread(unittest.TestCase):

    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        def union(a: int, b: int):
            parents[find(a)] = parents[find(b)]

        def find(a: int) -> int:
            if a != parents[a]:
                parents[a] = find(parents[a])
            return parents[a]

        parents = [i for i in range(len(graph))]
        for i in range(len(parents)):
            for j in range(i, len(parents)):
                if graph[i][j] == 1:
                    union(i, j)

        componentToInitialNum = collections.Counter([find(i) for i in initial])
        componentToSize = collections.Counter([find(i) for i in range(len(graph))])

        minIndex, maxArea = min(initial), 0
        for value in initial:
            valueRoot = find(value)
            if componentToInitialNum[valueRoot] == 1:
                affectedArea = componentToSize[valueRoot]
                if affectedArea > maxArea:
                    minIndex = value
                    maxArea = affectedArea
                elif affectedArea == maxArea:
                    minIndex = min(minIndex, value)

        return minIndex

    @unittest.skip
    def test_Leetcode(self):
        # pick the biggest component
        self.assertEqual(0, self.minMalwareSpread([[1, 1, 0], [1, 1, 0], [0, 0, 1]], [0, 1]))

        # all individual component, pick the smallest
        self.assertEqual(0, self.minMalwareSpread([[1, 0, 0], [0, 1, 0], [0, 0, 1]], [0, 2]))

    @unittest.skip
    def test_Edgecase(self):
        # biggest component contains two malware while a smaller one only contains one
        self.assertEqual(2, self.minMalwareSpread([[1, 1, 0], [1, 1, 0], [0, 0, 1]], [0, 1, 2]))

        # Min not in sorted order
        self.assertEqual(2, self.minMalwareSpread([[1, 1, 0], [1, 1, 0], [0, 0, 1]], [1, 0, 2]))

    @unittest.skip
    def test_Errorcase1(self):
        # when the whole component needs to be looped through, the componentToInitialNum will not even consider a single time
        self.assertEqual(1, self.minMalwareSpread([[1, 1, 1], [1, 1, 1], [1, 1, 1]], [1, 2]))

    def test_Errorcase2(self):
        # How to use the componentToInitialNum and componentToSize map
        self.assertEqual(1, self.minMalwareSpread([[1, 0, 0, 0], [0, 1, 1, 0], [0, 1, 1, 0], [0, 0, 0, 1]], [1, 3]))



if __name__ == '__main__':
    unittest.main()